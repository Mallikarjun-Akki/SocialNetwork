package edu.upenn.cis.cis121.project;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

/**
 * @author jdesai
 * Class with methods that facilitate the use of the DBUtils class based on the specific database parameters of this project.
 */
public class DBWrapper {

	/**
	 * Statement variable, prevents too many cursors from being open at once.
	 */
	public Statement _statement;
	
	/**
	 * Constructor for the DBWrapper object. Opens a database connection using DBUtils.
	 * @param dbUser
	 * @param dbPass
	 * @param dbSID
	 * @param dbHost
	 * @param port
	 */
	public DBWrapper(String dbUser, String dbPass, String dbSID,
			String dbHost, int port) {
		try {
			DBUtils.openDBConnection(dbUser, dbPass, dbSID, dbHost, port);
			_statement = DBUtils._conn.createStatement();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			throw new IllegalArgumentException("Database connection parameters incorrect or invalid");
		}
	}
	
	/**
	 * Helper method to get an ArrayList of Integers generated by a particular query.
	 * @param query Input query.
	 * @return ArrayList of Integer values.
	 * @throws SQLException if the query is invalid. Should be handled by user of helper method.
	 */
	public int[] getOneColumn(String query) throws SQLException {
		ResultSet rs = null;
		ArrayList<Integer> ret = new ArrayList<Integer>();
		rs = _statement.executeQuery(query);
		while (rs.next()) {
			ret.add(rs.getInt(1));
		}
		int[] realRet = new int[ret.size()];
		for (int i = 0; i < realRet.length; i++) {
			realRet[i] = ret.get(i);
		}
		return realRet;
	}
	
	/**
	 * Retrieves the friends of the user with the input ID.
	 * @param user_id The user whose friends are to be found.
	 * @return An array of the input user's friends' IDs.
	 */
	public int[] getFriends(int user_id) {
		String query1 = "select user_id2 from Friends where user_id1 = " + Integer.toString(user_id);
		String query2 = "select user_id1 from Friends where user_id2 = " + Integer.toString(user_id);
		int[] ret;
		int[] re1;
		int[] re2;
		try {
			re1 = getOneColumn(query1);
			re2 = getOneColumn(query2);
			ret = new int[re1.length + re2.length];
			System.arraycopy(re1, 0, ret, 0, re1.length);
			System.arraycopy(re2, 0, ret, re1.length, re2.length);
		} catch (SQLException e) {
			throw new IllegalArgumentException("Invalid/nonexistent user_id");
		}
		return ret;
	}
	
	/** 
	 * Retrieves the places liked by the user with the input ID.
	 * @param user_id The user whose liked places are to be found.
	 * @return An array of the IDs of places liked by the input user.
	 */
	public int[] getLikes(int user_id) {
		String query = "select place_id from Likes where user_id = " + Integer.toString(user_id);
		int[] ret;
		try {
			ret = getOneColumn(query);
		} catch (SQLException e) {
			throw new IllegalArgumentException("Invalid/nonexistent user_id");
		}
		return ret;
	}
	
	/**
	 * Retrieves the coordinates of the input place.
	 * @param place_id The ID of the place whose coordinates are to be found.
	 * @return The coordinates of the input place in the form of an array of length 2 ({latitude, longitude}).
	 */
	public double[] getLocation(int place_id) {
		String query = "select latitude, longitude from Places where place_id = " + Integer.toString(place_id);
		ResultSet rs = null;
		double[] arr = new double[2];
		try {
			rs = _statement.executeQuery(query);
			rs.next();
			arr[0] = rs.getDouble(1);
			arr[1] = rs.getDouble(2);
		} catch (SQLException e) {
			throw new IllegalArgumentException("Invalid/nonexistent place_id");
		}
		return arr;
	}
	
	/**
	 * Gets the coordinates of a user.
	 * @param user_id the user whose coordinates are to be found.
	 * @return A 2-length array containing the user's latitude and longitude (in that order).
	 */
	public double[] getLocUser(int user_id) {
		String query = "select latitude, longitude from Users where user_id = " + Integer.toString(user_id);
		ResultSet rs = null;
		double[] arr = new double[2];
		try {
			rs = _statement.executeQuery(query);
			rs.next();
			arr[0] = rs.getDouble(1);
			arr[1] = rs.getDouble(2);
		} catch (SQLException e) {
			throw new IllegalArgumentException("Invalid user_id");
		}
		return arr;
	}
	
	/**
	 * This method returns the users who like a particular place.
	 * @param place_id the ID of the place to be looked up.
	 * @return an array containing the IDs of the users who like the place with the input ID.
	 * @throws SQLException if the place ID provided does not exist in the database or is invalid.
	 */
	public int[] getLikers(int place_id) throws SQLException {
		String q = "select user_id from Likes where place_id = " + Integer.toString(place_id);
		return getOneColumn(q);
	}
	
	/**
	 * Closes the connection to the database.
	 */
	public void closeDBConnection() {
		try {
			DBUtils.closeDBConnection();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * For testing.
	 * @param args command line arguments
	 */
	public static void main(String[] args) {
		
	}
	
}
